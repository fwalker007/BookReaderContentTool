var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import ReactDOM from 'react-dom';
import { Group } from 'react-konva';
const needForceStyle = (el) => {
    const pos = window.getComputedStyle(el).position;
    const ok = pos === 'absolute' || pos === 'relative';
    return !ok;
};
export const Html = ({ children, groupProps, divProps, transform }) => {
    const groupRef = React.useRef();
    const container = React.useRef();
    const shouldTransform = transform !== null && transform !== void 0 ? transform : true;
    const handleTransform = () => {
        const div = container.current;
        if (!div) {
            return;
        }
        div.style.position = 'absolute';
        div.style.zIndex = '10';
        const _a = divProps || {}, { style } = _a, restProps = __rest(_a, ["style"]);
        Object.assign(div.style, style);
        Object.assign(div, restProps);
        if (shouldTransform) {
            const tr = groupRef.current.getAbsoluteTransform();
            const attrs = tr.decompose();
            div.style.top = '0px';
            div.style.left = '0px';
            div.style.transform = `translate(${attrs.x}px, ${attrs.y}px) rotate(${attrs.rotation}deg) scaleX(${attrs.scaleX}) scaleY(${attrs.scaleY})`;
            div.style.transformOrigin = 'top left';
        }
    };
    React.useLayoutEffect(() => {
        var _a;
        const group = groupRef.current;
        if (!group) {
            return;
        }
        const parent = (_a = group.getStage()) === null || _a === void 0 ? void 0 : _a.container();
        if (!parent) {
            return;
        }
        let div = document.createElement('div');
        container.current = div;
        parent.appendChild(div);
        if (shouldTransform && needForceStyle(parent)) {
            parent.style.position = 'relative';
        }
        group.on('_clearTransformCache', handleTransform);
        handleTransform();
        return () => {
            var _a;
            ReactDOM.unmountComponentAtNode(div);
            (_a = div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(div);
        };
    }, [shouldTransform]);
    React.useLayoutEffect(() => {
        ReactDOM.render(children, container.current);
    });
    return React.createElement(Group, Object.assign({ ref: groupRef }, groupProps));
};
