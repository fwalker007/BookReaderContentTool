{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Group } from 'react-konva';\n\nvar needForceStyle = function needForceStyle(el) {\n  var pos = window.getComputedStyle(el).position;\n  var ok = pos === 'absolute' || pos === 'relative';\n  return !ok;\n};\n\nexport var Html = function Html(_ref) {\n  var children = _ref.children,\n      groupProps = _ref.groupProps,\n      divProps = _ref.divProps,\n      transform = _ref.transform;\n  var groupRef = React.useRef();\n  var container = React.useRef();\n  var shouldTransform = transform !== null && transform !== void 0 ? transform : true;\n\n  var handleTransform = function handleTransform() {\n    var div = container.current;\n\n    if (!div) {\n      return;\n    }\n\n    div.style.position = 'absolute';\n    div.style.zIndex = '10';\n\n    var _a = divProps || {},\n        style = _a.style,\n        restProps = __rest(_a, [\"style\"]);\n\n    Object.assign(div.style, style);\n    Object.assign(div, restProps);\n\n    if (shouldTransform) {\n      var tr = groupRef.current.getAbsoluteTransform();\n      var attrs = tr.decompose();\n      div.style.top = '0px';\n      div.style.left = '0px';\n      div.style.transform = \"translate(\".concat(attrs.x, \"px, \").concat(attrs.y, \"px) rotate(\").concat(attrs.rotation, \"deg) scaleX(\").concat(attrs.scaleX, \") scaleY(\").concat(attrs.scaleY, \")\");\n      div.style.transformOrigin = 'top left';\n    }\n  };\n\n  React.useLayoutEffect(function () {\n    var _a;\n\n    var group = groupRef.current;\n\n    if (!group) {\n      return;\n    }\n\n    var parent = (_a = group.getStage()) === null || _a === void 0 ? void 0 : _a.container();\n\n    if (!parent) {\n      return;\n    }\n\n    var div = document.createElement('div');\n    container.current = div;\n    parent.appendChild(div);\n\n    if (shouldTransform && needForceStyle(parent)) {\n      parent.style.position = 'relative';\n    }\n\n    group.on('_clearTransformCache', handleTransform);\n    handleTransform();\n    return function () {\n      var _a;\n\n      ReactDOM.unmountComponentAtNode(div);\n      (_a = div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(div);\n    };\n  }, [shouldTransform]);\n  React.useLayoutEffect(function () {\n    ReactDOM.render(children, container.current);\n  });\n  return React.createElement(Group, Object.assign({\n    ref: groupRef\n  }, groupProps));\n};","map":null,"metadata":{},"sourceType":"module"}