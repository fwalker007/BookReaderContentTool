{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\nimport { __assign, __spreadArrays } from \"tslib\";\nimport * as React from \"react\";\nimport { HotkeysDialog2 } from \"../../components/hotkeys/hotkeysDialog2\";\nvar initialHotkeysState = {\n  hotkeys: [],\n  isDialogOpen: false\n};\n\nvar noOpDispatch = function noOpDispatch() {\n  return null;\n}; // we can remove this guard once Blueprint depends on React 16\n\n\nexport var HotkeysContext = (_a = React.createContext) === null || _a === void 0 ? void 0 : _a.call(React, [initialHotkeysState, noOpDispatch]);\n\nvar hotkeysReducer = function hotkeysReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_HOTKEYS\":\n      return __assign(__assign({}, state), {\n        hotkeys: __spreadArrays(state.hotkeys, action.payload)\n      });\n\n    case \"REMOVE_HOTKEYS\":\n      return __assign(__assign({}, state), {\n        hotkeys: state.hotkeys.filter(function (key) {\n          return action.payload.indexOf(key) === -1;\n        })\n      });\n\n    case \"OPEN_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: true\n      });\n\n    case \"CLOSE_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: false\n      });\n\n    default:\n      return state;\n  }\n};\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\n\n\nexport var HotkeysProvider = function HotkeysProvider(_a) {\n  var _b;\n\n  var children = _a.children,\n      dialogProps = _a.dialogProps,\n      renderDialog = _a.renderDialog;\n\n  var _c = React.useReducer(hotkeysReducer, initialHotkeysState),\n      state = _c[0],\n      dispatch = _c[1];\n\n  var handleDialogClose = React.useCallback(function () {\n    return dispatch({\n      type: \"CLOSE_DIALOG\"\n    });\n  }, []);\n  var dialog = (_b = renderDialog === null || renderDialog === void 0 ? void 0 : renderDialog(state, {\n    handleDialogClose: handleDialogClose\n  })) !== null && _b !== void 0 ? _b : React.createElement(HotkeysDialog2, __assign({}, dialogProps, {\n    isOpen: state.isDialogOpen,\n    hotkeys: state.hotkeys,\n    onClose: handleDialogClose\n  }));\n  return React.createElement(HotkeysContext.Provider, {\n    value: [state, dispatch]\n  }, children, dialog);\n};","map":null,"metadata":{},"sourceType":"module"}