{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar react_1 = __importDefault(require(\"react\")),\n    core_1 = require(\"@blueprintjs/core\"),\n    mobx_react_lite_1 = require(\"mobx-react-lite\"),\n    color_picker_1 = __importDefault(require(\"./color-picker\"));\n\nexports.default = mobx_react_lite_1.observer(function (e) {\n  var t = e.element,\n      a = \"text\" === t.type,\n      r = \"image\" === t.type,\n      n = \"svg\" === t.type;\n  return react_1.default.createElement(core_1.Popover, {\n    content: react_1.default.createElement(\"div\", {\n      style: {\n        padding: \"15px\",\n        width: \"200px\"\n      }\n    }, react_1.default.createElement(core_1.Switch, {\n      checked: t.blurEnabled,\n      label: \"Blur\",\n      onChange: function onChange(e) {\n        t.set({\n          blurEnabled: e.target.checked\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT\n    }), t.blurEnabled && react_1.default.createElement(core_1.Slider, {\n      value: t.blurRadius,\n      labelStepSize: 5,\n      onChange: function onChange(e) {\n        t.set({\n          blurRadius: e\n        });\n      },\n      min: 0,\n      max: 20,\n      showTrackFill: !1\n    }), react_1.default.createElement(core_1.Switch, {\n      checked: t.brightnessEnabled,\n      label: \"Brightness\",\n      onChange: function onChange(e) {\n        t.set({\n          brightnessEnabled: e.target.checked\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), t.brightnessEnabled && react_1.default.createElement(core_1.Slider, {\n      value: 100 * t.brightness + 100,\n      onChange: function onChange(e) {\n        t.set({\n          brightness: (e - 100) / 100\n        });\n      },\n      min: 0,\n      max: 200,\n      showTrackFill: !1,\n      labelStepSize: 50\n    }), react_1.default.createElement(core_1.Switch, {\n      checked: t.sepiaEnabled,\n      label: \"Sepia\",\n      onChange: function onChange(e) {\n        t.set({\n          sepiaEnabled: e.target.checked\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), react_1.default.createElement(core_1.Switch, {\n      checked: t.grayscaleEnabled,\n      label: \"Grayscale\",\n      onChange: function onChange(e) {\n        t.set({\n          grayscaleEnabled: e.target.checked\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), a && react_1.default.createElement(core_1.Switch, {\n      checked: !!t.strokeWidth,\n      label: \"Text stroke\",\n      onChange: function onChange(e) {\n        t.set({\n          strokeWidth: e.target.checked ? 2 : 0\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), !!t.strokeWidth && react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      }\n    }, react_1.default.createElement(color_picker_1.default, {\n      value: t.stroke,\n      size: 30,\n      onChange: function onChange(e) {\n        t.set({\n          stroke: e\n        });\n      }\n    }), react_1.default.createElement(core_1.NumericInput, {\n      value: t.strokeWidth,\n      onValueChange: function onValueChange(e) {\n        t.set({\n          strokeWidth: e\n        });\n      },\n      style: {\n        width: \"80px\"\n      },\n      min: 0,\n      max: 30\n    }))), (r || n) && react_1.default.createElement(core_1.Switch, {\n      checked: !!t.borderSize,\n      label: \"Border\",\n      onChange: function onChange(e) {\n        t.set({\n          borderSize: e.target.checked ? 2 : 0\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), !!t.borderSize && react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      }\n    }, react_1.default.createElement(color_picker_1.default, {\n      value: t.borderColor,\n      size: 30,\n      onChange: function onChange(e) {\n        t.set({\n          borderColor: e\n        });\n      }\n    }), react_1.default.createElement(core_1.NumericInput, {\n      value: t.borderSize,\n      onValueChange: function onValueChange(e) {\n        t.set({\n          borderSize: e\n        });\n      },\n      style: {\n        width: \"80px\"\n      },\n      min: 0,\n      max: 30\n    }))), react_1.default.createElement(core_1.Switch, {\n      checked: t.shadowEnabled,\n      label: \"Shadow\",\n      onChange: function onChange(e) {\n        t.set({\n          shadowEnabled: e.target.checked\n        });\n      },\n      alignIndicator: core_1.Alignment.RIGHT,\n      style: {\n        marginTop: \"20px\"\n      }\n    }), t.shadowEnabled && react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(core_1.Slider, {\n      value: t.shadowBlur,\n      onChange: function onChange(e) {\n        t.set({\n          shadowBlur: e\n        });\n      },\n      min: 0,\n      max: 50,\n      showTrackFill: !1,\n      labelRenderer: !1\n    }))),\n    position: core_1.Position.BOTTOM\n  }, react_1.default.createElement(core_1.Button, {\n    icon: \"left-join\",\n    text: \"Effects\",\n    minimal: !0\n  }));\n});","map":null,"metadata":{},"sourceType":"script"}