{"ast":null,"code":"import _createForOfIteratorHelper from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Development\\\\Encantos\\\\RandD\\\\Polotno\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Factory } from './Factory.js';\nimport { Node } from './Node.js';\nimport { getNumberValidator } from './Validators.js';\nexport var Container = /*#__PURE__*/function (_Node) {\n  _inherits(Container, _Node);\n\n  var _super = _createSuper(Container);\n\n  function Container() {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.apply(this, arguments);\n    _this.children = [];\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"getChildren\",\n    value: function getChildren(filterFunc) {\n      if (!filterFunc) {\n        return this.children || [];\n      }\n\n      var children = this.children || [];\n      var results = [];\n      children.forEach(function (child) {\n        if (filterFunc(child)) {\n          results.push(child);\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren() {\n      return this.getChildren().length > 0;\n    }\n  }, {\n    key: \"removeChildren\",\n    value: function removeChildren() {\n      this.getChildren().forEach(function (child) {\n        child.parent = null;\n        child.index = 0;\n        child.remove();\n      });\n      this.children = [];\n      return this;\n    }\n  }, {\n    key: \"destroyChildren\",\n    value: function destroyChildren() {\n      this.getChildren().forEach(function (child) {\n        child.parent = null;\n        child.index = 0;\n        child.destroy();\n      });\n      this.children = [];\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n        children[_key] = arguments[_key];\n      }\n\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.add(arguments[i]);\n        }\n\n        return this;\n      }\n\n      var child = children[0];\n\n      if (child.getParent()) {\n        child.moveTo(this);\n        return this;\n      }\n\n      this._validateAdd(child);\n\n      child._clearCaches();\n\n      child.index = this.getChildren().length;\n      child.parent = this;\n      this.getChildren().push(child);\n\n      this._fire('add', {\n        child: child\n      });\n\n      this._requestDraw();\n\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.hasChildren()) {\n        this.destroyChildren();\n      }\n\n      _get(_getPrototypeOf(Container.prototype), \"destroy\", this).call(this);\n\n      return this;\n    }\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      return this._generalFind(selector, false);\n    }\n  }, {\n    key: \"findOne\",\n    value: function findOne(selector) {\n      var result = this._generalFind(selector, true);\n\n      return result.length > 0 ? result[0] : undefined;\n    }\n  }, {\n    key: \"_generalFind\",\n    value: function _generalFind(selector, findOne) {\n      var retArr = [];\n\n      this._descendants(function (node) {\n        var valid = node._isMatch(selector);\n\n        if (valid) {\n          retArr.push(node);\n        }\n\n        if (valid && findOne) {\n          return true;\n        }\n\n        return false;\n      });\n\n      return retArr;\n    }\n  }, {\n    key: \"_descendants\",\n    value: function _descendants(fn) {\n      var shouldStop = false;\n      var children = this.getChildren();\n\n      var _iterator = _createForOfIteratorHelper(children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          shouldStop = fn(child);\n\n          if (shouldStop) {\n            return true;\n          }\n\n          if (!child.hasChildren()) {\n            continue;\n          }\n\n          shouldStop = child._descendants(fn);\n\n          if (shouldStop) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      var obj = Node.prototype.toObject.call(this);\n      obj.children = [];\n      this.getChildren().forEach(function (child) {\n        obj.children.push(child.toObject());\n      });\n      return obj;\n    }\n  }, {\n    key: \"isAncestorOf\",\n    value: function isAncestorOf(node) {\n      var parent = node.getParent();\n\n      while (parent) {\n        if (parent._id === this._id) {\n          return true;\n        }\n\n        parent = parent.getParent();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(obj) {\n      var node = Node.prototype.clone.call(this, obj);\n      this.getChildren().forEach(function (no) {\n        node.add(no.clone());\n      });\n      return node;\n    }\n  }, {\n    key: \"getAllIntersections\",\n    value: function getAllIntersections(pos) {\n      var arr = [];\n      this.find('Shape').forEach(function (shape) {\n        if (shape.isVisible() && shape.intersects(pos)) {\n          arr.push(shape);\n        }\n      });\n      return arr;\n    }\n  }, {\n    key: \"_clearSelfAndDescendantCache\",\n    value: function _clearSelfAndDescendantCache(attr) {\n      var _a;\n\n      _get(_getPrototypeOf(Container.prototype), \"_clearSelfAndDescendantCache\", this).call(this, attr);\n\n      if (this.isCached()) {\n        return;\n      }\n\n      (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (node) {\n        node._clearSelfAndDescendantCache(attr);\n      });\n    }\n  }, {\n    key: \"_setChildrenIndices\",\n    value: function _setChildrenIndices() {\n      var _a;\n\n      (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child, n) {\n        child.index = n;\n      });\n\n      this._requestDraw();\n    }\n  }, {\n    key: \"drawScene\",\n    value: function drawScene(can, top) {\n      var layer = this.getLayer(),\n          canvas = can || layer && layer.getCanvas(),\n          context = canvas && canvas.getContext(),\n          cachedCanvas = this._getCanvasCache(),\n          cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;\n\n      var caching = canvas && canvas.isCache;\n\n      if (!this.isVisible() && !caching) {\n        return this;\n      }\n\n      if (cachedSceneCanvas) {\n        context.save();\n        var m = this.getAbsoluteTransform(top).getMatrix();\n        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n\n        this._drawCachedSceneCanvas(context);\n\n        context.restore();\n      } else {\n        this._drawChildren('drawScene', canvas, top);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"drawHit\",\n    value: function drawHit(can, top) {\n      if (!this.shouldDrawHit(top)) {\n        return this;\n      }\n\n      var layer = this.getLayer(),\n          canvas = can || layer && layer.hitCanvas,\n          context = canvas && canvas.getContext(),\n          cachedCanvas = this._getCanvasCache(),\n          cachedHitCanvas = cachedCanvas && cachedCanvas.hit;\n\n      if (cachedHitCanvas) {\n        context.save();\n        var m = this.getAbsoluteTransform(top).getMatrix();\n        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n\n        this._drawCachedHitCanvas(context);\n\n        context.restore();\n      } else {\n        this._drawChildren('drawHit', canvas, top);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_drawChildren\",\n    value: function _drawChildren(drawMethod, canvas, top) {\n      var _a;\n\n      var context = canvas && canvas.getContext(),\n          clipWidth = this.clipWidth(),\n          clipHeight = this.clipHeight(),\n          clipFunc = this.clipFunc(),\n          hasClip = clipWidth && clipHeight || clipFunc;\n      var selfCache = top === this;\n\n      if (hasClip) {\n        context.save();\n        var transform = this.getAbsoluteTransform(top);\n        var m = transform.getMatrix();\n        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        context.beginPath();\n\n        if (clipFunc) {\n          clipFunc.call(this, context, this);\n        } else {\n          var clipX = this.clipX();\n          var clipY = this.clipY();\n          context.rect(clipX, clipY, clipWidth, clipHeight);\n        }\n\n        context.clip();\n        m = transform.copy().invert().getMatrix();\n        context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n      }\n\n      var hasComposition = !selfCache && this.globalCompositeOperation() !== 'source-over' && drawMethod === 'drawScene';\n\n      if (hasComposition) {\n        context.save();\n\n        context._applyGlobalCompositeOperation(this);\n      }\n\n      (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n        child[drawMethod](canvas, top);\n      });\n\n      if (hasComposition) {\n        context.restore();\n      }\n\n      if (hasClip) {\n        context.restore();\n      }\n    }\n  }, {\n    key: \"getClientRect\",\n    value: function getClientRect(config) {\n      var _a;\n\n      config = config || {};\n      var skipTransform = config.skipTransform;\n      var relativeTo = config.relativeTo;\n      var minX, minY, maxX, maxY;\n      var selfRect = {\n        x: Infinity,\n        y: Infinity,\n        width: 0,\n        height: 0\n      };\n      var that = this;\n      (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n        if (!child.visible()) {\n          return;\n        }\n\n        var rect = child.getClientRect({\n          relativeTo: that,\n          skipShadow: config.skipShadow,\n          skipStroke: config.skipStroke\n        });\n\n        if (rect.width === 0 && rect.height === 0) {\n          return;\n        }\n\n        if (minX === undefined) {\n          minX = rect.x;\n          minY = rect.y;\n          maxX = rect.x + rect.width;\n          maxY = rect.y + rect.height;\n        } else {\n          minX = Math.min(minX, rect.x);\n          minY = Math.min(minY, rect.y);\n          maxX = Math.max(maxX, rect.x + rect.width);\n          maxY = Math.max(maxY, rect.y + rect.height);\n        }\n      });\n      var shapes = this.find('Shape');\n      var hasVisible = false;\n\n      for (var i = 0; i < shapes.length; i++) {\n        var shape = shapes[i];\n\n        if (shape._isVisible(this)) {\n          hasVisible = true;\n          break;\n        }\n      }\n\n      if (hasVisible && minX !== undefined) {\n        selfRect = {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY\n        };\n      } else {\n        selfRect = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (!skipTransform) {\n        return this._transformedRect(selfRect, relativeTo);\n      }\n\n      return selfRect;\n    }\n  }]);\n\n  return Container;\n}(Node);\nFactory.addComponentsGetterSetter(Container, 'clip', ['x', 'y', 'width', 'height']);\nFactory.addGetterSetter(Container, 'clipX', undefined, getNumberValidator());\nFactory.addGetterSetter(Container, 'clipY', undefined, getNumberValidator());\nFactory.addGetterSetter(Container, 'clipWidth', undefined, getNumberValidator());\nFactory.addGetterSetter(Container, 'clipHeight', undefined, getNumberValidator());\nFactory.addGetterSetter(Container, 'clipFunc');","map":null,"metadata":{},"sourceType":"module"}