{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // TODO: use @ts-expect-error\n\n\nimport { useContext, useRef, useState, useCallback } from 'react';\nimport defaultConfig, { cache } from './config';\nimport { useIsomorphicLayoutEffect } from './env';\nimport SWRConfigContext from './swr-config-context';\nimport useSWR from './use-swr';\n\nfunction useSWRInfinite() {\n  var _this = this;\n\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var getKey = args[0];\n  var config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), args.length > 2 ? args[2] : args.length === 2 && typeof args[1] === 'object' ? args[1] : {}); // in typescript args.length > 2 is not same as args.lenth === 3\n  // we do a safe type assertion here\n  // args.length === 3\n\n  var fn = args.length > 2 ? args[1] : args.length === 2 && typeof args[1] === 'function' ? args[1] : config.fetcher;\n\n  var _a = config.initialSize,\n      initialSize = _a === void 0 ? 1 : _a,\n      _b = config.revalidateAll,\n      revalidateAll = _b === void 0 ? false : _b,\n      _c = config.persistSize,\n      persistSize = _c === void 0 ? false : _c,\n      extraConfig = __rest(config // get the serialized key of the first page\n  , [\"initialSize\", \"revalidateAll\", \"persistSize\"]); // get the serialized key of the first page\n\n\n  var firstPageKey = null;\n\n  try {\n    ;\n    firstPageKey = cache.serializeKey(getKey(0, null))[0];\n  } catch (err) {// not ready\n  }\n\n  var rerender = useState({})[1]; // we use cache to pass extra info (context) to fetcher so it can be globally shared\n  // here we get the key of the fetcher context cache\n\n  var contextCacheKey = null;\n\n  if (firstPageKey) {\n    contextCacheKey = 'ctx@' + firstPageKey;\n  } // page size is also cached to share the page data between hooks having the same key\n\n\n  var pageSizeCacheKey = null;\n\n  if (firstPageKey) {\n    pageSizeCacheKey = 'len@' + firstPageKey;\n  }\n\n  var didMountRef = useRef(false);\n  var resolvePageSize = useCallback(function () {\n    var cachedPageSize = cache.get(pageSizeCacheKey);\n    return typeof cachedPageSize !== 'undefined' ? cachedPageSize : initialSize;\n  }, [pageSizeCacheKey, initialSize]); // keep the last page size to restore it with the persistSize option\n\n  var lastPageSizeRef = useRef(resolvePageSize()); // every time the key changes, we reset the page size if it's not persisted\n\n  useIsomorphicLayoutEffect(function () {\n    if (!didMountRef.current) {\n      didMountRef.current = true;\n      return;\n    } // If the key has been changed, we keep the current page size if persistSize is enabled\n\n\n    cache.set(pageSizeCacheKey, persistSize ? lastPageSizeRef.current : initialSize); // initialSize isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [firstPageKey]); // keep the data inside a ref\n\n  var dataRef = useRef(); // actual swr of all pages\n\n  var swr = useSWR(firstPageKey ? ['inf', firstPageKey] : null, function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, originalData, force, data, pageSize, previousPageData, i, _b, pageKey, pageArgs, pageData, shouldFetchPage;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = cache.get(contextCacheKey) || {}, originalData = _a.data, force = _a.force;\n            data = [];\n            pageSize = resolvePageSize();\n            previousPageData = null;\n            i = 0;\n            _c.label = 1;\n\n          case 1:\n            if (!(i < pageSize)) return [3\n            /*break*/\n            , 8];\n            _b = cache.serializeKey(getKey(i, previousPageData)), pageKey = _b[0], pageArgs = _b[1];\n\n            if (!pageKey) {\n              // pageKey is falsy, stop fetching next pages\n              return [3\n              /*break*/\n              , 8];\n            }\n\n            pageData = cache.get(pageKey);\n            shouldFetchPage = revalidateAll || force || typeof pageData === 'undefined' || typeof force === 'undefined' && i === 0 && typeof dataRef.current !== 'undefined' || originalData && !config.compare(originalData[i], pageData);\n            if (!shouldFetchPage) return [3\n            /*break*/\n            , 6];\n            if (!(pageArgs !== null)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , fn.apply(void 0, pageArgs)];\n\n          case 2:\n            pageData = _c.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , fn(pageKey)];\n\n          case 4:\n            pageData = _c.sent();\n            _c.label = 5;\n\n          case 5:\n            cache.set(pageKey, pageData);\n            _c.label = 6;\n\n          case 6:\n            data.push(pageData);\n            previousPageData = pageData;\n            _c.label = 7;\n\n          case 7:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 8:\n            // once we executed the data fetching based on the context, clear the context\n            cache.delete(contextCacheKey); // return the data\n\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  }, extraConfig); // update dataRef\n\n  useIsomorphicLayoutEffect(function () {\n    dataRef.current = swr.data;\n  }, [swr.data]);\n  var mutate = useCallback(function (data, shouldRevalidate) {\n    if (shouldRevalidate === void 0) {\n      shouldRevalidate = true;\n    }\n\n    if (shouldRevalidate && typeof data !== 'undefined') {\n      // we only revalidate the pages that are changed\n      var originalData = dataRef.current;\n      cache.set(contextCacheKey, {\n        data: originalData,\n        force: false\n      });\n    } else if (shouldRevalidate) {\n      // calling `mutate()`, we revalidate all pages\n      cache.set(contextCacheKey, {\n        force: true\n      });\n    }\n\n    return swr.mutate(data, shouldRevalidate);\n  }, // swr.mutate is always the same reference\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [contextCacheKey]); // extend the SWR API\n\n  var setSize = useCallback(function (arg) {\n    var size;\n\n    if (typeof arg === 'function') {\n      size = arg(resolvePageSize());\n    } else if (typeof arg === 'number') {\n      size = arg;\n    }\n\n    if (typeof size === 'number') {\n      cache.set(pageSizeCacheKey, size);\n      lastPageSizeRef.current = size;\n    }\n\n    rerender({});\n    return mutate(function (v) {\n      return v;\n    });\n  }, // immutability of rerender is guaranteed by React, but react-hooks/exhaustive-deps doesn't recognize it\n  // from `rerender = useState({})[1], so we put rerender here\n  [pageSizeCacheKey, resolvePageSize, mutate, rerender]); // Use getter functions to avoid unnecessary re-renders caused by triggering all the getters of the returned swr object\n\n  var swrInfinite = {\n    size: resolvePageSize(),\n    setSize: setSize,\n    mutate: mutate\n  };\n  Object.defineProperties(swrInfinite, {\n    error: {\n      get: function get() {\n        return swr.error;\n      },\n      enumerable: true\n    },\n    data: {\n      get: function get() {\n        return swr.data;\n      },\n      enumerable: true\n    },\n    // revalidate will be deprecated in the 1.x release\n    // because mutate() covers the same use case of revalidate().\n    // This remains only for backward compatibility\n    revalidate: {\n      get: function get() {\n        return swr.revalidate;\n      },\n      enumerable: true\n    },\n    isValidating: {\n      get: function get() {\n        return swr.isValidating;\n      },\n      enumerable: true\n    }\n  });\n  return swrInfinite;\n}\n\nexport { useSWRInfinite };","map":null,"metadata":{},"sourceType":"module"}