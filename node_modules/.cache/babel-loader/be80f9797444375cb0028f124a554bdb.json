{"ast":null,"code":"import Konva from 'konva/lib/Core';\nimport { applyNodeProps, updatePicture, EVENTS_NAMESPACE } from './makeUpdates';\nexport { unstable_now as now, unstable_IdlePriority as idlePriority, unstable_runWithPriority as run } from 'scheduler';\nvar NO_CONTEXT = {};\nvar UPDATE_SIGNAL = {}; // for react-spring capability\n\nKonva.Node.prototype._applyProps = applyNodeProps;\nexport function appendInitialChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    // Noop for string children of Text (eg <Text>foo</Text>)\n    console.error('Do not use plain text as child of Konva.Node. You are using text: ' + child);\n    return;\n  }\n\n  parentInstance.add(child);\n  updatePicture(parentInstance);\n}\nexport function createInstance(type, props, internalInstanceHandle) {\n  var NodeClass = Konva[type];\n\n  if (!NodeClass) {\n    console.error('Konva has no node with the type ' + type + '. If you use minimal version of react-konva, just import required nodes into Konva: \"import \"konva/lib/shapes/' + type + '\"  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html');\n    return;\n  } // we need to split props into events and non events\n  // we we can pass non events into constructor directly\n  // that way the performance should be better\n  // we we apply change \"applyNodeProps\"\n  // then it will trigger change events on first run\n  // but we don't need them!\n\n\n  var propsWithoutEvents = {};\n  var propsWithOnlyEvents = {};\n\n  for (var key in props) {\n    var isEvent = key.slice(0, 2) === 'on';\n\n    if (isEvent) {\n      propsWithOnlyEvents[key] = props[key];\n    } else {\n      propsWithoutEvents[key] = props[key];\n    }\n  }\n\n  var instance = new NodeClass(propsWithoutEvents);\n  applyNodeProps(instance, propsWithOnlyEvents);\n  return instance;\n}\nexport function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\n  console.error('Text components are not supported for now in ReactKonva. Your text is: \"' + text + '\"');\n}\nexport function finalizeInitialChildren(domElement, type, props) {\n  return false;\n}\nexport function getPublicInstance(instance) {\n  return instance;\n}\nexport function prepareForCommit() {\n  return null;\n}\nexport function preparePortalMount() {\n  return null;\n}\nexport function prepareUpdate(domElement, type, oldProps, newProps) {\n  return UPDATE_SIGNAL;\n}\nexport function resetAfterCommit() {// Noop\n}\nexport function resetTextContent(domElement) {// Noop\n}\nexport function shouldDeprioritizeSubtree(type, props) {\n  return false;\n}\nexport function getRootHostContext() {\n  return NO_CONTEXT;\n}\nexport function getChildHostContext() {\n  return NO_CONTEXT;\n}\nexport var scheduleTimeout = setTimeout;\nexport var cancelTimeout = clearTimeout;\nexport var noTimeout = -1; // export const schedulePassiveEffects = scheduleDeferredCallback;\n// export const cancelPassiveEffects = cancelDeferredCallback;\n\nexport function shouldSetTextContent(type, props) {\n  return false;\n} // The Konva renderer is secondary to the React DOM renderer.\n\nexport var isPrimaryRenderer = false;\nexport var warnsIfNotActing = true;\nexport var supportsMutation = true;\nexport function appendChild(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n\n  updatePicture(parentInstance);\n}\nexport function appendChildToContainer(parentInstance, child) {\n  if (child.parent === parentInstance) {\n    child.moveToTop();\n  } else {\n    parentInstance.add(child);\n  }\n\n  updatePicture(parentInstance);\n}\nexport function insertBefore(parentInstance, child, beforeChild) {\n  // child._remove() will not stop dragging\n  // but child.remove() will stop it, but we don't need it\n  // removing will reset zIndexes\n  child._remove();\n\n  parentInstance.add(child);\n  child.setZIndex(beforeChild.getZIndex());\n  updatePicture(parentInstance);\n}\nexport function insertInContainerBefore(parentInstance, child, beforeChild) {\n  insertBefore(parentInstance, child, beforeChild);\n}\nexport function removeChild(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\nexport function removeChildFromContainer(parentInstance, child) {\n  child.destroy();\n  child.off(EVENTS_NAMESPACE);\n  updatePicture(parentInstance);\n}\nexport function commitTextUpdate(textInstance, oldText, newText) {\n  console.error('Text components are not yet supported in ReactKonva. You text is: \"' + newText + '\"');\n}\nexport function commitMount(instance, type, newProps) {// Noop\n}\nexport function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n  applyNodeProps(instance, newProps, oldProps);\n}\nexport function hideInstance(instance) {\n  instance.hide();\n  updatePicture(instance);\n}\nexport function hideTextInstance(textInstance) {// Noop\n}\nexport function unhideInstance(instance, props) {\n  if (props.visible == null || props.visible) {\n    instance.show();\n  }\n}\nexport function unhideTextInstance(textInstance, text) {// Noop\n}\nexport function clearContainer(container) {// Noop\n}","map":null,"metadata":{},"sourceType":"module"}